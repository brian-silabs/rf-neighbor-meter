<!-- 
     This xml file contains a sample extension to the Application Framework's
     cluster definitions. There are 4 ways to add manufacturer specific
     extensions within ZigBee.  
     
     1. Private Profile: 
        You can create your own private ZigBee profile.
        We do not provide an example of this here since private profiles 
        may or may not even use the cluster library or something like it. If
        you create your own custom profile you can basically do whatever you
        want after the APS frame in the ZigBee packet. If you choose to use
        the ZigBee cluster library within your private profile the Application
        Framework will be useful to you. If you do not, it will not be useful
        to you as all of the code in the Application Framework centers around
        support for the ZigBee Cluster Library (ZCL).
      
    2. Manufacturer Specific Clusters:
       You can add manufacturer specific clusters to a standard profile.
       We provide an example of this below. In order to do this you must
       satisfy two obligations:
         
         1. The cluster id MUST be in the manufacturer specific range,
            0xfc00 - 0xffff.
         2. The cluster definition must include a manufacturer code 
            which will be applied to ALL attributes and 
            commands within that cluster and must be provided when sending 
            and receiving commands and interacting with attributes. 
     
     3. Manufacturer Specific Commands in Standard ZigBee Custer:
        You can add your own commands to any standard ZigBee cluster with 
        the following requirements:
        
        1. Your manufacturer specific commands may use any command id 
          within the command id range, 0x00 - 0xff. 
        2. You must also provide a manufacturer code for the command so 
           that it can be distinguished from other commands in the cluster 
           and handled appropriately.
     
     4. Manufacturer Specific Attributes in Standard ZigBee Cluster:
        You can add your own attributes to any standard ZigBee cluster with 
        the following requirements:
        
        1. Your manufacturer specific attributes may use any attribute id 
           within the attribute id range, 0x0000 - 0xffff. 
        2. You must also provide a manufacturer code for the attribute so 
           that it can be distinguished from other attributes in the cluster 
           and handled appropriately.
        
     This sample provides an example of how to:
       1. Extend the ZCL with a manufacturer specific cluster 
       2. Extend the standard ZCL on/off cluster with manufacturer specific
          attributes.
       3. Extend the standard ZCL on/off cluster with manufacturer specific
          commands.
     
     Manufacturer Code:
     In all cases below, we have used Ember's manufacturerCode 0x1002 since
     the cluster, attributes and the commands were created by Ember 
     as an example of how the Application Framework can be 
     extended to support manufacturer specific commands and attributes.
     
     XML Validation:
     You may validate any xml file that you create against the 
     AppBuilder XSD located in tool/appbuilder/appbuilder.xsd
     
-->

<configurator>
  <domain name="Brian" />
  <!-- Use manufacturerCode to indicate that this is a manufacturer specific
       cluster. -->
  <cluster manufacturerCode="0x1003">
    <name>RF Neighbor Meter</name>
    <domain>Brian</domain>
    <description>This cluster provides access to neighboring RF nodes information (both neighbors and end devices).</description>
    <!-- Cluster Id must be within the mfg spec range 0xfc00 - 0xffff -->
    <code>0xFC00</code> 
    <define>RF_NEIGHBOR_METER_CLUSTER</define>
    <client init="false" tick="false">true</client>
    <server init="false" tick="false">true</server>
    <attribute side="server" code="0x0000" define="NUMBER_OF_USED_ENTRIES" 
      type="INT8U"  min="0x00"   max="0xFF"   writable="false"  
      default="0x10" optional="false">Number of used entries</attribute>
      
    <attribute side="server" code="0x0001" define="UPDATE_THRESHOLD" 
      type="INT8U"  min="0x00"   max="0xFF"   writable="true"  
      default="0x1" optional="false">Update Threshold</attribute>
      
    <attribute side="server" code="0x0002" define="DESTINATION_SHORT_ID" 
      type="INT16U"  min="0x0000"   max="0xFFFF"   writable="true"  
      default="0x0000" optional="false">Destination Short Id</attribute>

    <command source="client" code="0x00" 
      name="getAllEntries" 
      optional="false">
      <description>
        Command that requests all entries to be sent back .
      </description>
    </command>

    <command source="client" code="0x01" 
      name="getEntry" 
      optional="false">
      <description>
        Command that requests one entry to be sent back .
      </description>
      <arg name="neighborEui" type="IEEE_ADDRESS" />
    </command>

    <command source="client" code="0x02" 
      name="setRemoteShortId" 
      optional="false">
      <description>
        Command that sets the Short ID of the gatherer of RF data.
      </description>
      <arg name="argOne" type="INT16U" />
    </command>

    <command source="server" code="0x00" 
      name="getEntryResponse" 
      optional="false">
      <description>
        Command that requests one entry to be sent back .
      </description>
      <arg name="neighborStruct" type="INT8U" array="true"/>
    </command>

    <command source="server" code="0x01" 
      name="entryUpdate" 
      optional="false">
      <description>
        Command that requests one entry to be sent back .
      </description>
      <arg name="neighborStruct" type="INT8U" array="true"/>
    </command>

    <command source="server" code="0x02" 
      name="getAllEntriesResponse" 
      optional="false">
      <description>
        Command that requests one entry to be sent back .
      </description>
      <arg name="neighborStructArray" type="INT8U" array="true"/>
    </command>

  </cluster>  
  
</configurator>